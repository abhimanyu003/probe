<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Examples on</title><link>https://abhimanyu003.github.io/probe/docs/examples/</link><description>Recent content in Examples on</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Tue, 06 Oct 2020 08:49:15 +0000</lastBuildDate><atom:link href="https://abhimanyu003.github.io/probe/docs/examples/index.xml" rel="self" type="application/rss+xml"/><item><title>Auth and Get User</title><link>https://abhimanyu003.github.io/probe/docs/examples/auth-and-get-user/</link><pubDate>Tue, 06 Oct 2020 08:49:31 +0000</pubDate><guid>https://abhimanyu003.github.io/probe/docs/examples/auth-and-get-user/</guid><description>Based on
Auth https://dummyjson.com/docs/auth Single User https://dummyjson.com/docs/users name: auth and get user stages: - name: auth request: url: &amp;quot;https://dummyjson.com/auth/login&amp;quot; method: POST formData: username: kminchelle password: 0lelplR assert: status: 200 export: body: - select: .id as: userId # setting id as userId variable - select: .token as: token # setting token id as variable - name: Get Single User request: # using userId variable from previous stage url: &amp;quot;https://dummyjson.com/users/${userId}&amp;quot; method: GET headers: # using token from previous stage token: ${token} assert: status: 200 body: - select: .</description></item><item><title>Form Data</title><link>https://abhimanyu003.github.io/probe/docs/examples/form-data/</link><pubDate>Thu, 12 Nov 2020 13:26:54 +0100</pubDate><guid>https://abhimanyu003.github.io/probe/docs/examples/form-data/</guid><description>Simple GET request that will show various JQ operations.
name: Form Data stages: - name: add product request: url: &amp;quot;https://dummyjson.com/products/add&amp;quot; method: POST headers: Content-Type: 'application/json' formData: title: 'BMW Pencil' assert: status: 200 body: - select: .id want: 101</description></item><item><title>JQ example</title><link>https://abhimanyu003.github.io/probe/docs/examples/jq-example/</link><pubDate>Thu, 12 Nov 2020 13:26:54 +0100</pubDate><guid>https://abhimanyu003.github.io/probe/docs/examples/jq-example/</guid><description>Simple GET request that will show various JQ operations.
name: JQ Example stages: - name: get products request request: url: &amp;quot;https://dummyjson.com/products&amp;quot; method: GET assert: status: 200 body: - select: .products | length want: 50 - select: .products[0].id | isnormal want: true - select: .products[0].images | length want: 5 - select: .products[] | select(.title == &amp;quot;iPhone 9&amp;quot;) | .id want: 1</description></item><item><title>JSON Keys</title><link>https://abhimanyu003.github.io/probe/docs/examples/json-keys/</link><pubDate>Thu, 12 Nov 2020 13:26:54 +0100</pubDate><guid>https://abhimanyu003.github.io/probe/docs/examples/json-keys/</guid><description>Assert if all the required keys exists in our JSON. Here we are not worried about values here, but only keys
jq operation #
. | keys Example #
name: validate json keys stages: - name: get product one request: url: &amp;quot;https://dummyjson.com/products/1&amp;quot; method: GET assert: status: 200 body: - select: . | keys constrain: json want: | [ &amp;quot;brand&amp;quot;, &amp;quot;category&amp;quot;, &amp;quot;description&amp;quot;, &amp;quot;discountPercentage&amp;quot;, &amp;quot;id&amp;quot;, &amp;quot;images&amp;quot;, &amp;quot;price&amp;quot;, &amp;quot;rating&amp;quot;, &amp;quot;stock&amp;quot;, &amp;quot;thumbnail&amp;quot;, &amp;quot;title&amp;quot; ] Tip #
You can also sort keys using jq operations:</description></item></channel></rss>