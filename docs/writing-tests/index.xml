<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Writing Test on</title><link>https://doks-child-theme.netlify.app/docs/writing-tests/</link><description>Recent content in Writing Test on</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Tue, 06 Oct 2020 08:48:45 +0000</lastBuildDate><atom:link href="https://doks-child-theme.netlify.app/docs/writing-tests/index.xml" rel="self" type="application/rss+xml"/><item><title>Writing Tests</title><link>https://doks-child-theme.netlify.app/docs/writing-tests/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://doks-child-theme.netlify.app/docs/writing-tests/overview/</guid><description>Overview #
Probe makes it easy to write end-to-end API tests using YAML and JQ.
This section illustrates how to write a simple test suite with Probe, and what are the conventions you should use.
The setup is very simple looks like this:
name: name of test stages: # a test can multiple stages - name: name of stage request: # request builder here assert: status: # assert response status code ( eg: 200, 404, 500 ) headers: # things you want to assert in header body: # things you want to assert Probe use jq as JSON query processor</description></item><item><title>Assertions</title><link>https://doks-child-theme.netlify.app/docs/writing-tests/assertions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://doks-child-theme.netlify.app/docs/writing-tests/assertions/</guid><description>Overview #
Probe use jq as JSON query processor
jq is like sed for JSON data - you can use it to slice and filter and map and transform structured data with the same ease that sed, awk, grep and friends let you play with text.
ðŸ‘‰ More details on jq: https://stedolan.github.io/jq/
Some JQ Playgrounds
JQPlay JQTerm ( amazing one ) Lets say if you have API JSON output which looks like this.</description></item><item><title>Variables</title><link>https://doks-child-theme.netlify.app/docs/writing-tests/variables/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://doks-child-theme.netlify.app/docs/writing-tests/variables/</guid><description>Overview #
It&amp;rsquo;s possible to have variables ${ VAR } in your test, sometime you want to export few property from header or body to next stage.
Types of Variables
Env Variables. ( System Variable ) ${ env:VAR } Test Variables ( Common for all stages ). Run Time Variables / Stage Variables ( Exported on stage run time ). Exported variable can be used in stage body or header</description></item><item><title>Setup and Teardown</title><link>https://doks-child-theme.netlify.app/docs/writing-tests/setup-and-teardown/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://doks-child-theme.netlify.app/docs/writing-tests/setup-and-teardown/</guid><description>Overview #
In your tests, you may want to run some code before and after each test or file. In this section, we&amp;rsquo;ll discuss the globally available functions that allow you to do that.
beforeAll run before all stages beforeEach run after each stage afterEach run after each stage afterAll run after all stages name: test setup and teardown # run before all stages beforeAll: - path/to/first-test.yaml - path/to/first-second.yaml # run after each stage beforeEach: - path/to/first-test.</description></item><item><title>Logs</title><link>https://doks-child-theme.netlify.app/docs/writing-tests/logs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://doks-child-theme.netlify.app/docs/writing-tests/logs/</guid><description>Overview #
Probe captures and logs all the request. You can find logs for your test under logs folder
logs/ 2023-02-13T19:21:39+05:30/ test-1.log test-2.log 2023-02-13T19:22:13+05:30 test-1.log test-2.log Example #
:authority: httpbin.org :method: POST :path: /post :scheme: https user-agent: probe ( https://github.com/abhimanyu003/probe ) content-type: application/x-www-form-urlencoded content-length: 18 accept-encoding: gzip username=abhimanyu :status: 200 date: Mon, 13 Feb 2023 16:30:47 GMT content-type: application/json content-length: 482 server: gunicorn/19.9.0 access-control-allow-origin: * access-control-allow-credentials: true { &amp;quot;args&amp;quot;: {}, &amp;quot;data&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;files&amp;quot;: {}, &amp;quot;form&amp;quot;: { &amp;quot;username&amp;quot;: &amp;quot;abhimanyu&amp;quot; }, &amp;quot;headers&amp;quot;: { &amp;quot;Accept-Encoding&amp;quot;: &amp;quot;gzip&amp;quot;, &amp;quot;Content-Length&amp;quot;: &amp;quot;18&amp;quot;, &amp;quot;Content-Type&amp;quot;: &amp;quot;application/x-www-form-urlencoded&amp;quot;, &amp;quot;Host&amp;quot;: &amp;quot;httpbin.</description></item><item><title>Skip Test</title><link>https://doks-child-theme.netlify.app/docs/writing-tests/skip-test/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://doks-child-theme.netlify.app/docs/writing-tests/skip-test/</guid><description>Overview #
During development, you may want to temporarily turn off a test. Rather than commenting it out, you can use the skip method.
It&amp;rsquo;s possible to skip a test as well as individual stage
name: setting test variables skip: true # skip whole test stages: - name: send request skip: true # skip stage request: url: &amp;quot;https://httpbin.org/get&amp;quot; method: GET assert: status: 200</description></item></channel></rss>