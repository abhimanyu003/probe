var suggestions=document.getElementById("suggestions"),search=document.getElementById("search");search!==null&&document.addEventListener("keydown",inputFocus);function inputFocus(e){e.ctrlKey&&e.key==="/"&&(e.preventDefault(),search.focus()),e.key==="Escape"&&(search.blur(),suggestions.classList.add("d-none"))}document.addEventListener("click",function(e){var t=suggestions.contains(e.target);t||suggestions.classList.add("d-none")}),document.addEventListener("keydown",suggestionFocus);function suggestionFocus(e){const s=suggestions.classList.contains("d-none");if(s)return;const t=[...suggestions.querySelectorAll("a")];if(t.length===0)return;const n=t.indexOf(document.activeElement);if(e.key==="ArrowUp"){e.preventDefault();const s=n>0?n-1:0;t[s].focus()}else if(e.key==="ArrowDown"){e.preventDefault();const s=n+1<t.length?n+1:n;t[s].focus()}}(function(){var e=new FlexSearch.Document({tokenize:"forward",cache:100,document:{id:"id",store:["href","title","description"],index:["title","description","content"]}});e.add({id:0,href:"/probe/docs/writing-tests/overview/",title:"Writing Tests",description:"This article will introduce how to Write Tests.",content:`Overview #Probe makes it easy to write end-to-end API tests using YAML and JQ.
This section illustrates how to write a simple test suite with Probe, and what are the conventions you should use.
The setup is very simple looks like this:
name: name of test stages: # a test can multiple stages - name: name of stage request: # request builder here assert: status: # assert response status code ( eg: 200, 404, 500 ) headers: # things you want to assert in header body: # things you want to assert Probe use jq as JSON query processor
jq is like sed for JSON data - you can use it to slice and filter and map and transform structured data with the same ease that sed, awk, grep and friends let you play with text.
ðŸ‘‰ More details on jq: https://stedolan.github.io/jq/
You can use all the functions and power of jq ðŸ™‚
Quick Example #Create a file main.yaml ( filename can be anything ) name: Writing Test stages: - name: first stage request: url: \u0026quot;https://httpbin.org/get\u0026quot; method: GET assert: status: 200 Running test probe run Stages #A test is required to have a stage, which allow your to send HTTP Request and Assert Body. Test can have multiple stages, stages run in sequential order.
name: name of test stages: # a test can multiple stages - name: first stage request: # request for first stage here assert: # things you want to assert - name: second stage request: # request for second stage here assert: # things you want to assert Example: Single Stage Test #Create a file with name main.yaml ( filename can be anything ) name: Writing Test stages: - name: first stage request: url: \u0026quot;https://httpbin.org/get\u0026quot; method: GET assert: status: 200 Example: Multiple Stage Test #Create a file with name main.yaml ( filename can be anything ) name: Writing Test stages: - name: first stage request: url: \u0026quot;https://httpbin.org/get\u0026quot; method: GET assert: status: 200 - name: second stage request: url: \u0026quot;https://httpbin.org/post\u0026quot; method: POST assert: status: 200 Running test probe run `}),e.add({id:1,href:"/probe/docs/writing-tests/assertions/",title:"Assertions",description:"This article will introduce how to Write Tests.",content:`Overview #Probe use jq as JSON query processor
jq is like sed for JSON data - you can use it to slice and filter and map and transform structured data with the same ease that sed, awk, grep and friends let you play with text.
ðŸ‘‰ More details on jq: https://stedolan.github.io/jq/
Some JQ Playgrounds
JQPlay JQTerm ( amazing one ) Lets say if you have API JSON output which looks like this.
{ \u0026quot;userId\u0026quot;: 1, \u0026quot;id\u0026quot;: 1, \u0026quot;title\u0026quot;: \u0026quot;delectus aut autem\u0026quot;, \u0026quot;completed\u0026quot;: false } Use \u0026ldquo;probe\u0026rdquo; to test
Create a file with name main.yaml ( filename can be anything ) name: Writing Test stages: - name: first stage request: url: 'https://jsonplaceholder.typicode.com/todos/1' method: GET assert: body: - select: .userId # jq query language want: 1 - select: .title # jq query language want: \u0026quot;delectus aut autem\u0026quot; ðŸ’¡ Here select: .userId and select: .title is jq query language.
Assert Response Status Code #Assert response status code like 200, 404, 500 etc.
assert: status: 200 # provide valid response header code Example #name: Assert response status stages: - name: test todo endpoint request: url: 'https://jsonplaceholder.typicode.com/todos/1' method: GET assert: status: 200 # assert of response status code Assert Response Headers #It\u0026rsquo;s also possible to assert response headers.
assert: status: 200 headers: - select: # select header key want: # header value Example #name: Assert header stages: - name: test todo endpoint request: url: 'https://jsonplaceholder.typicode.com/todos/1' method: GET assert: status: 200 headers: - select: pragma want: \u0026quot;no-cache\u0026quot; Assert JSON field #You can validate JSON fields, using constrain tags
constrain:json Example #name: Test JSON field stages: - name: first user request: url: 'https://jsonplaceholder.typicode.com/users/1' method: GET assert: body: - select: .address.geo # assert json field constrain: json # json constrain tag want: | { \u0026quot;lat\u0026quot;: \u0026quot;-37.3159\u0026quot;, \u0026quot;lng\u0026quot;: \u0026quot;81.1496\u0026quot; } More Live Examples #JSON response from https://jsonplaceholder.typicode.com/users/1
It looks something like this:
{ \u0026quot;id\u0026quot;: 1, \u0026quot;name\u0026quot;: \u0026quot;Leanne Graham\u0026quot;, \u0026quot;username\u0026quot;: \u0026quot;Bret\u0026quot;, \u0026quot;email\u0026quot;: \u0026quot;Sincere@april.biz\u0026quot;, \u0026quot;address\u0026quot;: { \u0026quot;street\u0026quot;: \u0026quot;Kulas Light\u0026quot;, \u0026quot;suite\u0026quot;: \u0026quot;Apt. 556\u0026quot;, \u0026quot;city\u0026quot;: \u0026quot;Gwenborough\u0026quot;, \u0026quot;zipcode\u0026quot;: \u0026quot;92998-3874\u0026quot;, \u0026quot;geo\u0026quot;: { \u0026quot;lat\u0026quot;: \u0026quot;-37.3159\u0026quot;, \u0026quot;lng\u0026quot;: \u0026quot;81.1496\u0026quot; } }, \u0026quot;phone\u0026quot;: \u0026quot;1-770-736-8031 x56442\u0026quot;, \u0026quot;website\u0026quot;: \u0026quot;hildegard.org\u0026quot;, \u0026quot;company\u0026quot;: { \u0026quot;name\u0026quot;: \u0026quot;Romaguera-Crona\u0026quot;, \u0026quot;catchPhrase\u0026quot;: \u0026quot;Multi-layered client-server neural-net\u0026quot;, \u0026quot;bs\u0026quot;: \u0026quot;harness real-time e-markets\u0026quot; } } To test the above endpoint using probe
Create a main.yaml file with this name: Test User stages: - name: test first user request: url: 'https://jsonplaceholder.typicode.com/users/1' method: GET assert: status: 200 body: - select: .email want: \u0026quot;Sincere@april.biz\u0026quot; - select: .address.street want: \u0026quot;Kulas Light\u0026quot; - select: .address.geo constrain: json want: | { \u0026quot;lat\u0026quot;: \u0026quot;-37.3159\u0026quot;, \u0026quot;lng\u0026quot;: \u0026quot;81.1496\u0026quot; } `}),e.add({id:2,href:"/probe/docs/writing-tests/variables/",title:"Variables",description:"This article will introduce how to use variables.",content:`Overview #It\u0026rsquo;s possible to have variables \${ VAR } in your test, sometime you want to export few property from header or body to next stage.
Types of Variables
Env Variables. ( System Variable ) \${ env:VAR } .env File Variables ( .env file variables ) \${ env:VAR } Test Variables ( Common for all stages ). Run Time Variables / Stage Variables ( Exported on stage run time ). Exported variable can be used in stage body or header
\${ env:VAR } // retrieves the value of the os/system variable. \`{ VAR } // run time exported variable Env Variables #It\u0026rsquo;s possible to load OS/system level variable in test. This is also helpful and allow you to set/load many variable even before test starts
\${env:USER} Probe also supports loading of .env file as well.
probe run test.yaml --env-file=\u0026quot;/path/to/.env\u0026quot; URL=https://example.com USERNAME=abhmanyu003 PASSWORD=admin123 By default, probe will check if there is any \u0026ldquo;.env\u0026rdquo; in the folder you are running test from and will auto load it.
Here \${env:USER} will load the value of USER present at OS level.
Example: Env variables #assert: body: - select: .form.username want: \${env:USER} Test Variables #It\u0026rsquo;s possible to export test level variables that will common for all stages. These are define at the top of all the stages
name: set variables variables: key: value secondKey: secondValue Example: Test Variable #name: setting test variables variables: name: abhimanyu stages: - name: send request request: url: \u0026quot;https://httpbin.org/post\u0026quot; method: POST formData: username: \${name} # we are using exported name variable here Run Time Variables #It\u0026rsquo;s possible to export any header or body value, that can be used in next stage.
export: # export key header: - select: token as: authToken body: - select: .form.username as: username You can also export variable right from assert as well
assert: body: - select: .form.username want: \u0026quot;abhimanyu\u0026quot; exportAs: \u0026quot;username\u0026quot; # Exporting right from assert Example: Run Time Variables #name: exporting runtime variables stages: - name: send request request: url: \u0026quot;https://httpbin.org/post\u0026quot; method: POST formData: username: abhimanyu assert: status: 200 export: # here we are exporting variables from body body: - select: .form.username as: \u0026quot;username\u0026quot; `}),e.add({id:3,href:"/probe/docs/writing-tests/setup-and-teardown/",title:"Setup and Teardown",description:"This article will introduce how to Setup and Teardown.",content:`Overview #In your tests, you may want to run some code before and after each test or file. In this section, we\u0026rsquo;ll discuss the globally available functions that allow you to do that.
beforeAll run before all stages beforeEach run after each stage afterEach run after each stage afterAll run after all stages name: test setup and teardown # run before all stages beforeAll: - path/to/first-test.yaml - path/to/first-second.yaml # run after each stage beforeEach: - path/to/first-test.yaml - path/to/first-second.yaml # run after each stage afterEach: - path/to/first-test.yaml - path/to/first-second.yaml # run after all stages afterAll: - path/to/first-test.yaml - path/to/first-second.yaml stages: - name: send request request: url: \u0026quot;https://httpbin.org/get\u0026quot; method: GET assert: status: 200 `}),e.add({id:4,href:"/probe/docs/writing-tests/logs/",title:"Logs",description:"This article will introduce how to Logs.",content:`Overview #Probe captures and logs all the request. You can find logs for your test under logs folder
logs/ 2023-02-13T19:21:39+05:30/ test-1.log test-2.log 2023-02-13T19:22:13+05:30 test-1.log test-2.log Example #:authority: httpbin.org :method: POST :path: /post :scheme: https user-agent: probe ( https://github.com/abhimanyu003/probe ) content-type: application/x-www-form-urlencoded content-length: 18 accept-encoding: gzip username=abhimanyu :status: 200 date: Mon, 13 Feb 2023 16:30:47 GMT content-type: application/json content-length: 482 server: gunicorn/19.9.0 access-control-allow-origin: * access-control-allow-credentials: true { \u0026quot;args\u0026quot;: {}, \u0026quot;data\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;files\u0026quot;: {}, \u0026quot;form\u0026quot;: { \u0026quot;username\u0026quot;: \u0026quot;abhimanyu\u0026quot; }, \u0026quot;headers\u0026quot;: { \u0026quot;Accept-Encoding\u0026quot;: \u0026quot;gzip\u0026quot;, \u0026quot;Content-Length\u0026quot;: \u0026quot;18\u0026quot;, \u0026quot;Content-Type\u0026quot;: \u0026quot;application/x-www-form-urlencoded\u0026quot;, \u0026quot;Host\u0026quot;: \u0026quot;httpbin.org\u0026quot;, \u0026quot;User-Agent\u0026quot;: \u0026quot;probe ( https://github.com/abhimanyu003/probe )\u0026quot;, \u0026quot;X-Amzn-Trace-Id\u0026quot;: \u0026quot;Root=1-63ea65b7-1203aa90794001080b5fdee2\u0026quot; }, \u0026quot;json\u0026quot;: null, \u0026quot;origin\u0026quot;: \u0026quot;103.59.75.66\u0026quot;, \u0026quot;url\u0026quot;: \u0026quot;https://httpbin.org/post\u0026quot; } Disable Logs #To disable logs you can use CLI flag --disableLogs
probe run --disableLogs `}),e.add({id:5,href:"/probe/docs/writing-tests/skip-test/",title:"Skip Test",description:"This article will introduce how to Skip Test.",content:`Overview #During development, you may want to temporarily turn off a test. Rather than commenting it out, you can use the skip method.
It\u0026rsquo;s possible to skip a test as well as individual stage
name: setting test variables skip: true # skip whole test stages: - name: send request skip: true # skip stage request: url: \u0026quot;https://httpbin.org/get\u0026quot; method: GET assert: status: 200 `}),e.add({id:6,href:"/probe/docs/examples/auth-and-get-user/",title:"Auth and Get User",description:"Auth and Get User.",content:" Based on\nAuth https://dummyjson.com/docs/auth Single User https://dummyjson.com/docs/users name: auth and get user stages: - name: auth request: url: \u0026quot;https://dummyjson.com/auth/login\u0026quot; method: POST formData: username: kminchelle password: 0lelplR assert: status: 200 export: body: - select: .id as: userId # setting id as userId variable - select: .token as: token # setting token id as variable - name: Get Single User request: # using userId variable from previous stage url: \u0026quot;https://dummyjson.com/users/${userId}\u0026quot; method: GET headers: # using token from previous stage token: ${token} assert: status: 200 body: - select: .username want: \u0026quot;kminchelle\u0026quot; - select: .id want: 15 "}),e.add({id:7,href:"/probe/docs/prologue/",title:"Prologue",description:"Prologue Doks.",content:""}),e.add({id:8,href:"/probe/docs/prologue/install/",title:"Install",description:"How to install probe.",content:`Probe support wide variety of OS
\u0026rsquo;linux\u0026rsquo;, \u0026lsquo;darwin\u0026rsquo;, \u0026lsquo;windows\u0026rsquo; \u0026lsquo;386\u0026rsquo;, \u0026lsquo;amd64\u0026rsquo;, \u0026lsquo;arm64\u0026rsquo; Auto Install #curl -L https://raw.githubusercontent.com/abhimanyu003/probe/main/install.sh | bash This script installs the latest release by default.
Brew #brew install abhimanyu003/tap/probe Scoop #scoop bucket add probe https://github.com/abhimanyu003/scoop-bucket.git scoop install probe Arch Linux #yay -S probe-bin Snap #At this point we have to alias while using snap
sudo snap install go-probe sudo snap alias go-probe.probe probe Go Install #go install github.com/abhimanyu003/probe@latest wget #Use wget to download, gzipped pre-compiled binaries.
For instance, VERSION=v0.0.1 and BINARY=probe_0.0.1_linux_amd64
wget https://github.com/abhimanyu003/probe/releases/download/\${VERSION}/\${BINARY}.tar.gz -O - |\\ tar xz \u0026amp;\u0026amp; mv probe /usr/bin/probe You can find list of binary and release over Release Page!
Manually #Download the pre-compiled binaries from the Release! page and copy them to the desired location.
You can download
DEB RPM Pre-compiled binary Visit Release!
`}),e.add({id:9,href:"/probe/docs/examples/form-data/",title:"Form Data",description:"Form Data",content:`Simple GET request that will show various JQ operations.
name: Form Data stages: - name: add product request: url: \u0026quot;https://dummyjson.com/products/add\u0026quot; method: POST headers: Content-Type: 'application/json' formData: title: 'BMW Pencil' assert: status: 200 body: - select: .id want: 101 `}),e.add({id:10,href:"/probe/docs/examples/jq-example/",title:"JQ example",description:"JQ example",content:`Simple GET request that will show various JQ operations.
name: JQ Example stages: - name: get products request request: url: \u0026quot;https://dummyjson.com/products\u0026quot; method: GET assert: status: 200 body: - select: .products | length want: 50 - select: .products[0].id | isnormal want: true - select: .products[0].images | length want: 5 - select: .products[] | select(.title == \u0026quot;iPhone 9\u0026quot;) | .id want: 1 `}),e.add({id:11,href:"/probe/docs/examples/json-keys/",title:"JSON Keys",description:"JSON Keys",content:`Assert if all the required keys exists in our JSON. Here we are not worried about values here, but only keys
jq operation #. | keys Example #name: validate json keys stages: - name: get product one request: url: \u0026quot;https://dummyjson.com/products/1\u0026quot; method: GET assert: status: 200 body: - select: . | keys constrain: json want: | [ \u0026quot;brand\u0026quot;, \u0026quot;category\u0026quot;, \u0026quot;description\u0026quot;, \u0026quot;discountPercentage\u0026quot;, \u0026quot;id\u0026quot;, \u0026quot;images\u0026quot;, \u0026quot;price\u0026quot;, \u0026quot;rating\u0026quot;, \u0026quot;stock\u0026quot;, \u0026quot;thumbnail\u0026quot;, \u0026quot;title\u0026quot; ] Tip #You can also sort keys using jq operations:
. | keys | sort `}),e.add({id:12,href:"/probe/docs/writing-tests/",title:"Writing Test",description:"Request Doks.",content:""}),e.add({id:13,href:"/probe/docs/request/",title:"Request",description:"Request Doks.",content:""}),e.add({id:14,href:"/probe/docs/examples/",title:"Examples",description:"Examples.",content:""}),e.add({id:15,href:"/probe/docs/prologue/commands/",title:"Commands",description:"How to use probe commands.",content:`Run #Usage: probe run [flags] Flags: --disableLogs Disable logs file entries. --failfast Do not start new tests after the first test failure. -h, --help help for run --parallel uint Maximum number of tests to run simultaneously -v, --test.v Get verbose output of the tests. Run all tests in current folder and sub-directory #probe run Run specific test file #probe run /path/to/test.yaml Disable Logs #probe run --disableLogs Verbose output #probe run -v Failfast #probe run --failfast Limit parallel run #probe run --parallel 2 Help #probe help Version #probe version `}),e.add({id:16,href:"/probe/docs/",title:"Docs",description:"Docs Doks.",content:""}),e.add({id:17,href:"/probe/docs/request/set-allow-insecure/",title:"Set Allow Insecure",description:"This article will introduce how to set allow insecure.",content:`Many time in development env, there are no valid ssl crets. Enable send https without verifying the server\u0026rsquo;s certificates (disabled by default).
request: allowInsecure: true Example #name: Set Allow Insecure stages: - name: this will allow insecure request request: url: \u0026quot;https://httpbin.org/get\u0026quot; method: GET allowInsecure: true `}),e.add({id:18,href:"/probe/docs/request/set-basic-auth/",title:"Set Basic Auth",description:"This article will introduce how to set basic auth.",content:`You can send request using basic auth as well, basic auth need two things. username and password
request: basicAuth: username: me password: mypassword Example #name: Basic Auth stages: - name: request with basic auth request: url: \u0026quot;https://httpbin.org/get\u0026quot; method: GET basicAuth: username: me password: mypassword `}),e.add({id:19,href:"/probe/docs/request/set-bearer-auth-token/",title:"Set Bearer Auth Token",description:"This article will introduce how to Set Bearer Auth Token.",content:`You can set custom Set Bearer Auth Token inside of request.
request: headers: bearerAuthToken: token This will set Authorization: Bearer NGU1ZWYwZDJhNmZhZmJhODhmMjQ3ZDc4
Example #name: Set Bearer Auth Token stages: - name: request with bearer auth token request: url: \u0026quot;https://httpbin.org/post\u0026quot; method: POST headers: accept: application/json bearerAuthToken: ASDF1234567890 `}),e.add({id:20,href:"/probe/docs/request/set-body/",title:"Set Body",description:"This article will introduce how to set body.",content:`You can set raw body using body tag inside of request.
Default content-type header is text/plain; charset=utf-8
request: body: | { \u0026quot;id\u0026quot;:1 \u0026quot;name\u0026quot;: \u0026quot;test-name\u0026quot; } Example #name: Set Body stages: - name: request with body request: url: \u0026quot;https://httpbin.org/post\u0026quot; method: POST body: | { \u0026quot;id\u0026quot;:1 \u0026quot;name\u0026quot;: \u0026quot;test-name\u0026quot; } headers: content-type: application/json To set the correct content type make to to update the headers as well.
For JSON #headers: content-type: application/json For XML #headers: content-type: text/xml; charset=utf-8 `}),e.add({id:21,href:"/probe/docs/request/set-form-data/",title:"Set Form Data",description:"This article will introduce how to set form data.",content:` Note: the form data of GET, HEAD, and OPTIONS requests will be ignored by default.
request: formData: key: value You can set multiple values
request: formData: name: Abhimanyu username: abhimanyu003 Example #name: Set Form Data stages: - name: request with form data request: url: \u0026quot;https://httpbin.org/post\u0026quot; method: POST formData: name: abhimanyu003 url: https://github.com/abhimanyu003 `}),e.add({id:22,href:"/probe/docs/request/set-headers/",title:"Set Headers",description:"This article will introduce how to set headers.",content:`You can set custom headers inside of request.
request: headers: key: value You can set multiple headers, all of these will be sent in request.
request: headers: accept: application/json x-auth-token: 123adsf content-type: text/xml; charset=utf-8 Example #name: Set Headers stages: - name: request with custom headers request: url: \u0026quot;https://httpbin.org/post\u0026quot; method: POST headers: accept: application/json x-auth-token: custom-token content-type: text/xml; charset=utf-8 `}),e.add({id:23,href:"/probe/docs/request/set-json/",title:"Set Json",description:"This article will introduce how to Set Json.",content:`You can set json using bodyJson tag inside of request.
This will auto add header
Content-Type: application/json; charset=utf-8 request: bodyJson: | { \u0026quot;id\u0026quot;:1 \u0026quot;name\u0026quot;: \u0026quot;test-name\u0026quot; } Example #name: Set Json stages: - name: request with body request: url: \u0026quot;https://httpbin.org/post\u0026quot; method: POST bodyJson: | { \u0026quot;id\u0026quot;:1 \u0026quot;name\u0026quot;: \u0026quot;test-name\u0026quot; } `}),e.add({id:24,href:"/probe/docs/request/set-query-param/",title:"Set Query Param",description:"This article will introduce how to set form data.",content:`Set a URL query parameter with a key-value pair for requests.
request: queryParams: key: value You can set multiple values
request: queryParams: name: Abhimanyu username: abhimanyu003 Example #name: Set Query Param stages: - name: request with query param request: url: \u0026quot;https://httpbin.org/post\u0026quot; method: POST queryParams: name: Abhimanyu username: abhimanyu003 `}),e.add({id:25,href:"/probe/docs/request/set-sleep/",title:"Set Sleep",description:"This article will introduce how to set basic auth.",content:`You can sleep after each request in milliseconds
request: sleepAfter: 2000 # in milliseconds this is = 2 second sleepAfter stage #sleepAfter will sleep after stage is completed
name: Set Headers stages: - name: Request with Set Sleep sleepAfter: 2000 # sleep after each stage in milliseconds Note: if you are doing multiple request using times, then sleep will be applied to each request
request: times: 10 # sleep will be applied to after each request sleepAfter: 2000 # in milliseconds this is = 2 second Example #sleepAfter example
name: Set Sleep stages: - name: Request with Set Sleep request: url: \u0026quot;https://httpbin.org/get\u0026quot; method: GET sleepAfter: 2000 sleepAfter stage is completed example
name: Set Sleep stages: - name: Request with Set Sleep sleepAfter: 2000 request: url: \u0026quot;https://httpbin.org/get\u0026quot; method: GET Sleep after each request for 10 times example
This will sleep for 2000 millisecond after each request
name: Set Sleep stages: - name: Request with Set Sleep request: url: \u0026quot;https://httpbin.org/get\u0026quot; method: GET times: 10 sleepAfter: 2000 `}),e.add({id:26,href:"/probe/docs/request/set-timeout/",title:"Set Timeout",description:"This article will introduce how to Set Timeout.",content:`There are some api\u0026rsquo;s that take long to response, you can specify timeout to each request to wait for response.
request: timeout: 2000 # in milliseconds this is = 2 second Example #name: Set Timeout stages: - name: this will Set Timeout to Request request: url: \u0026quot;https://httpbin.org/get\u0026quot; method: GET timeout: 2000 `}),e.add({id:27,href:"/probe/docs/request/set-user-agent/",title:"Set User-Agent",description:"This article will introduce how to set User-Agent.",content:`Set the \u0026ldquo;User-Agent\u0026rdquo; header for requests.
Default value is probe ( https://github.com/abhimanyu003/probe )
request: userAgent: my-custom-user-agent Example #name: Set User Agent stages: - name: request with custom user agent request: url: \u0026quot;https://httpbin.org/get\u0026quot; method: GET userAgent: \u0026quot;AppleTV11,1/11.1\u0026quot; `}),e.add({id:28,href:"/probe/docs/request/upload/",title:"Upload",description:"This article will introduce how to Upload.",content:`You can send request using basic auth as well, basic auth need two things. username and password
request: url: \u0026quot;https://example.com/upload\u0026quot; method: POST files: - name: pic.jpg path: \u0026quot;/full/path/to/image/150.png\u0026quot; - name: pic-2.jpg path: \u0026quot;/full/path/to/image/150.png\u0026quot; Example #name: Basic Auth stages: - name: file upload request: url: \u0026quot;https://example.com/upload\u0026quot; method: POST files: - name: pic.jpg path: \u0026quot;/full/path/to/image/150.png\u0026quot; - name: pic-2.jpg path: \u0026quot;/full/path/to/image/150.png\u0026quot; `}),search.addEventListener("input",t,!0);function t(){const s=5;var n=this.value,o=e.search(n,{limit:s,enrich:!0});const t=new Map;for(const e of o.flatMap(e=>e.result)){if(t.has(e.doc.href))continue;t.set(e.doc.href,e.doc)}if(suggestions.innerHTML="",suggestions.classList.remove("d-none"),t.size===0&&n){const e=document.createElement("div");e.innerHTML=`No results for "<strong>${n}</strong>"`,e.classList.add("suggestion__no-results"),suggestions.appendChild(e);return}for(const[r,a]of t){const n=document.createElement("div");suggestions.appendChild(n);const e=document.createElement("a");e.href=r,n.appendChild(e);const o=document.createElement("span");o.textContent=a.title,o.classList.add("suggestion__title"),e.appendChild(o);const i=document.createElement("span");if(i.textContent=a.description,i.classList.add("suggestion__description"),e.appendChild(i),suggestions.appendChild(n),suggestions.childElementCount==s)break}}})()